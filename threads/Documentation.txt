Title:  Writeup for Project 1, Fall 2015 Date:  09/20/2015 Group:		Name					Email			Ching Ho Anthony Cheung		chinghoc@usc.edu			Yuan Fu				yuanfu@usc.edu		Chunan Zeng 			czeng@usc.eduI. Requirements:+Part1	Basically we will need to implement our own locks and condition variables into the nachos and test it through its environment.+Part2	Basically we think we should do is to simulate a Passport Office whereas the customer get into the office and try to get the passport done. However, the customer is stupid enough that wouldnÕt know the exact sequence to finish the passport application completion. He will first try to queue either application or picture clerks lines. Then the customer will queue for the other (application/picture) clerksÕ lines. Then, he will queue for the passport clerk for certifying the passport material and there is a possible 5% chance to actually make a mistake by the officer and to force the customer to queue up again. Then, he would finally make it to the cashier and try to finish the whole passport process by paying the last procedural fee.	Whenever the customer queue up, if he has enough money that he would actually try to skip the line by bribing for a shorter line.	Meanwhile for everything is happening in the office, there could have a special person comes to visit which is the senator (up to 10 people possibly in the scenario). He would wait for all the customers who are before him to finish all of their applications then he will enter the office with no other customers to intervene. The whole will only serve for him until he left the office and the office will restore back to normal state. This scenario could happen up to 10 times.		For everything is happening that the clerks are working hard. They can have a short/long break when they have finished serving all the customers on their own lines and take a break for themselves. However, when the line is queuing up more than 3 people, the manager of the office will notice it and will tell the clerks to back to work for their respective lines. On the other hand, the manager will also collect money from every clerks from time to time and make an account of the revenue they made so far in the office.	Thus, this basically concludes what is happening in the Passport Office Simulation Module.	We understand that we must avoid race condition and busy waiting for the implementations that to be as accurate and efficient at the same time.	We are planning to implement various of global variables that are being protected by locks and condition variables. This will avoid race condition and at the same time would not affect the output result.II. Assumptions:+Part1	No assumptions for part one as it is straightforward and simple.		Design: The designs of lock and condition class follow the conceptions of atomic operation, which rules out the possibility of race condition for the lock and condition users.	+Part2	+Overall:	N/A	+Customer:	N/A	+Application Clerk:	N/A	+ Picture Clerk:	There will be 20% chance that the customer will not like his/her own picture and re-queue the line again for taking another picture again.	+ Passport Clerk:	There will be 5% chance that the passport clerk will make a mistake and tells the customer of the stuff is not ready and re-queue (For Reference Piazza Q.74)	+ Cashier:	We are taking assumption that Cashier will only collect $100 from the customer ONLY if the customer can provide certified passport material. So the program will still print the following statement		ÒCashier [identifier] has received the $100 from Customer[identifier] before certification. They are to go to the back of my line.Ó	HOWEVER, since it fails to finish the process in cashier, the cashier will instead collecting the $100 from the customer, the cashier will return the collected $100 to the customer. So, in other words, the cashier wouldnÕt collect money as this statement gets printed.	There will be 5% chance that the cashier will make a ÒmistakeÓ that will treat the customer fail to provide certified passport material NO MATTER he has it or not.	+ Manager:	there is an int variable (count) that will count how many times the manager loop has been looped for. And once it reaches a specific number, he will print out the total amount of money of every type of clerks and the total earn money so far in the passport office.	And for every loop, the manager will go through every single one of the clerks to check if they meet the condition to wakeup (Normal/Senator scenario)	+ Senator:
	Senator does not care how many clerks the office has, he will only go to the first one of each type of clerk in the office as his passport being process. He will also go sequentially that he will go to application,picture,passport,cashier and leave as the sequence. He will not have the same behavior as the customers that will choose the shortest queue or randomly select different type of clerks to queue in line.III. Design:	The whole customer design is actually a big loop of decision tree that to decide where the customer should go (to which clerks in the passport office). The loop will keep going until the customer finished his job in the passport office (variable = 10).		There is a variable in the customer as a tracker of what had the customer finished process in different clerks. We use this variable to get the customer to decide what he clerk he has to queue up for. (For instance, the variable will be able to distinguish the customer has finished taking picture so he wouldnÕt queue up for picture clerk again).	For example, when the customer first arrived passport office, the variable = 0 that means nothing has done so far by the customer. 		If the customer went to the application clerk and finished the process, it will increment the variable by 1. 		If the customer went to the picture clerk and finished the process, it will increment the variable by 2.			If the customer went to the passport clerk and finished the process, it will increment the variable by 3.		If the customer went to the cashier and finished the process, it will increment the variable by 4.		So, in order for the customer to decide whether to start queuing up for cashier, his variable must be equal to 6 (1+2+3=6)		And the customer will also be able to know what he needs to do/decide afterwards as the variable varies. (0 -> go to application/picture, 1 -> go to picture, 2 -> go to application, 3 -> go to passport, etc.)		After the customer finished the process in cashier whereas his job in the passport office is finished, the variable will equal to 10 (6+4 = 10) and the customer loop will stop and the thread will get terminated whereas simulated as the customer left the passport office. 	For every clerk, there are two lines, one is normal line (no-bribe line) and quick line (bribe line). whoever is able to pay the fee (able to bribe) will always bribe and try to skip the line. Whereas the customer will be re-directed to the bribe line of the specific clerk and at the same time, the clerk will have a priority to serve the bribe line first always and then serve the normal line.		The way we implemented the senator is whenever senator arrives the office, he will get the global queue lock to stop the incoming customer to queue up in the office. Meanwhile, the clerks in the office will try to finish all the customers that are before the senators and go on break once they finished handling their own lines customers. When all the customers before the senator left the office that the senator will queue up the line as the sequence of a normal customer. Whenever he is going to queue in line, the manager will wake the respective clerk to back to work as there is always one senator in the passport office. Meanwhile, the office will acquire all the queues lock so no customer will be able to queue up in the office that will be able to simulate customers wait outside of the passport office. When the senator finished all the things in the passport office, he will leave the office and all the locks being acquired before (the queue lines) will be released and the customer will queue up again and to work as usual in the office.	IV. Implementation:

+Part1	class Lock {	public: 		char* getName(): Get the name of the Lock		void Acquire(): Acquire the lock, if the lock is being held, add the thread to the wait queue 		void Release(): Release the lock, if there is a thread waiting  		bool isHeldByCurrentThread():Is the current thread 	private: 		List *queue : the data structure to store the waiting thread 		Thread *lockHolder : store the current lock holder		enum State{ 			FREE, 			BUSY 		}:the Lock has 2 states: one is free and another is busy		 State state : state of lock };	Note: The Acquire function in Lock first checks whether the current thread hold the lock and whether the state of the lock is free for a successful acquire.		 The Release function in Lock first checks whether the current thread hold the lock and whether the waiting queue is empty.If the queue is not empty, the first thread existing in the waiting queue can acquire the lock next. Otherwise, set the current lock holder to NULL.	class Condition {	public:		char* getName(): Get the name of the condition		void Wait(Lock *conditionLock): release the lock, put the current thread to sleep and acquire the lock again. 		void Signal(Lock *conditionLock): signal a thread in the waiting queue. 		void Broadcast(Lock *conditionLock): signal all threads in the waiting queue.?	private: 		Lock *waitingLock: the lock for the conditional variable 		List *queue: queue for the waiting threads	Note: The Wait function in the Condition first checks whether pass in lock is NULL, whether the waiting Lock is equal to the pass in Lock and whether waiting lock is empty. If waiting lock is empty, then set the waiting lock to the pass in lock.		 The Signal function in the Condition first checks whether pass in lock is NULL, whether the waiting Lock is equal to the pass in Lock and whether waiting queue is empty. If waiting queue is empty, print out the message there is nothing to signal.		 The Broadcast function in the Condition first checks whether pass in lock is NULL and whether the waiting Lock is equal to the pass in Lock.};+Part2

	V. Testing:  (For each test case, you must show)	+ How to test- How to run the test cases, the commands, the arguments and so on.	+ Test Output- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output. The grader of your submission will be wanting to compare the output they get with what you say the output is.VI. Discussion:	+ Experiment expectation.  (What is supposed to happen.)
		We expect to have everything works by according to have a starting menu that can let the tester to input a desirable number for each clerks/customer/senator that will simulate the result.
		It will be meeting the criteria that the homework required the program to simulate.
		We simulate to have 20 customers and 1 senator and 3 for each clerk types whereas the senator will be located right in front of the 20th customer. We expect the customer will choose the shortest line always as he/she entered the passport office and there will not be 2 or more customers choosing the same line consecutively as there is a global lock that will prevent it to do so. There is always a shorter line or back to the [0] line among the rests of the clerks.
		We expect to have the result of the very first 19th customers to have processed their passports properly and till the senator, he will not let the last (20th) customer to queue inside of the passport office until the senator finished his passport procedures in the passport office. The whole office will resume back to work after the senator left the office. And it will served the very last customer and every clerk will go on break.	+ Experiment result.  (What actually happened.)
		It actually happens as what we expected as we inputted the specific numbers and requests for the scenario and it works as we have expected	+ Explanation
		The scenario provided proves the following statement as the homework stated: 
			Customers always take the shortest line, but no 2 customers ever choose the same shortest line at the same time.
			Managers only read one from one ClerkÕs total money received, at a time.
			Customer do not leave until they are given their passport by the Cashier. The Cashier does not start on another customer until they know that the last Customer has left their area.
			Clerks go on break when have no one waiting in their line
			Managers get Clerks off their break when lines get too long or the last customers
			Total sales never suffers from a race condition
			The behavior of Customers is proper when Senators arrive This is before, during, and after.		- Explain your experiment result - how it proves what 		  you were supposed to prove.VIII. Miscellaneous:	N/A