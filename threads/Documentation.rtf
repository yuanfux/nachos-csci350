{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red170\green12\blue145;\red15\green116\blue1;
}
\margl1440\margr1440\vieww30160\viewh21740\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Title:  Writeup for Project 1, Fall 2015\
 Date:  09/20/2015\
 Group:	Name					Email	\
		Ching Ho Anthony Cheung	chinghoc@usc.edu	\
		Yuan Fu				yuanfu@usc.edu\
		Chunan Zeng 			czeng@usc.edu\
\
I. Requirements:\
+Part1\
	\
\
+Part2\
	Basically we think we should do is to simulate a Passport Office whereas the customer get into the office and try to get the passport done. However, the customer is stupid enough that wouldn\'92t know the exact sequence to finish the passport application completion. He will first try to queue either application or picture clerks\'92 lines. Then the customer will queue for the other (application/picture) clerks\'92 lines. Then, he will queue for the passport clerk for certifying the passport material and there is a possible 5% chance to actually make a mistake by the officer and to force the customer to queue up again. Then, he would finally make it to the cashier and try to finish the whole passport process by paying the last procedural fee.\
\
	Whenever the customer queue up, if he has enough money that he would actually try to skip the line by bribing for a shorter line.\
\
	Meanwhile for everything is happening in the office, there could have a special person comes to visit which is the senator (up to 10 people possibly in the scenario). He would wait for all the customers who are before him to finish all of their applications then he will enter the office with no other customers to intervene. The whole will only serve for him until he left the office and the office will restore back to normal state. This scenario could happen up to 10 times.\
	\
	For everything is happening that the clerks are working hard. They can have a short/long break when they have finished serving all the customers on their own lines and take a break for themselves. However, when the line is queuing up more than 3 people, the manager of the office will notice it and will tell the clerks to back to work for their respective lines. On the other hand, the manager will also collect money from every clerks from time to time and make an account of the revenue they made so far in the office.\
\
	Thus, this basically concludes what is happening in the Passport Office Simulation Module.\
\
	We understand that we must avoid race condition and busy waiting for the implementations that to be as accurate and efficient at the same time.\
	We are planning to implement various of global variables that are being protected by locks and condition variables. This will avoid race condition and at the same time would not affect the output result.\
\
II. Assumptions:\
\
+Part1\
	No assumptions for part one as it is straightforward and simple.\
	\
	Design: The designs of lock and condition class follow the conceptions of atomic operation, which rules out the possibility of race condition for the lock and condition users.\
	\
\
+Part2\
\
	+Overall:\
\
	+Customer:\
\
	+Application Clerk:\
\
	+ Picture Clerk:\
	There will be 20% chance that the customer will not like his/her own picture and re-queue the line again for taking another picture again.\
\
	+ Passport Clerk:\
	There will be 5% chance that the passport clerk will make a mistake and tells the customer of the stuff is not ready and re-queue (For Reference Piazza Q.74)\
\
	+ Cashier:\
	We are taking assumption that Cashier will only collect $100 from the customer ONLY if the customer can provide certified passport material. So there is no printout of the following line\
		\'93Cashier [identifier] has received the $100 from Customer[identifier] before certification. They are to go to the back of my line.\'94\
	The customers failed to provide certified passport material will re-queue in the line without paying any money.\
\
	There will be 5% chance that the cashier will make a \'93mistake\'94 that will treat the customer fail to provide certified passport material NO MATTER he has it or not.\
\
	+ Manager:\
	there is an int variable (count) that will count how many times the manager loop has been looped for. And once it reaches a specific number, he will print out the total amount of money of every type of clerks and the total earn money so far in the passport office.\
\
	And for every loop, the manager will go through every single one of the clerks to check if they meet the condition to wakeup (Normal/Senator scenario)\
\
	+ Senator\
\
III. Design:\
\
	The whole customer design is actually a big loop of decision tree that to decide where the customer should go (to which clerks in the passport office). The loop will keep going until the customer finished his job in the passport office (variable = 10).	\
\
	There is a variable in the customer as a tracker of what had the customer finished process in different clerks. We use this variable to get the customer to decide what he clerk he has to queue up for. (For instance, the variable will be able to distinguish the customer has finished taking picture so he wouldn\'92t queue up for picture clerk again).\
	For example, when the customer first arrived passport office, the variable = 0 that means nothing has done so far by the customer. \
		If the customer went to the application clerk and finished the process, it will increment the variable by 1. \
		If the customer went to the picture clerk and finished the process, it will increment the variable by 2.	\
		If the customer went to the passport clerk and finished the process, it will increment the variable by 3.\
		If the customer went to the cashier and finished the process, it will increment the variable by 4.\
		So, in order for the customer to decide whether to start queuing up for cashier, his variable must be equal to 6 (1+2+3=6)\
		And the customer will also be able to know what he needs to do/decide afterwards as the variable varies. (0 -> go to application/picture, 1 -> go to picture, 2 -> go to application, 3 -> go to passport, etc.)\
		After the customer finished the process in cashier whereas his job in the passport office is finished, the variable will equal to 10 (6+4 = 10) and the customer loop will stop and the thread will get terminated whereas simulated as the customer left the passport office. \
\
	For every clerk, there are two lines, one is normal line (no-bribe line) and quick line (bribe line). whoever is able to pay the fee (able to bribe) will always bribe and try to skip the line. Whereas the customer will be re-directed to the bribe line of the specific clerk and at the same time, the clerk will have a priority to serve the bribe line first always and then serve the normal line.\
	\
	The way we implemented the senator is whenever senator arrives the office, he will get the global queue lock to stop the incoming customer to queue up in the office. Meanwhile, the clerks in the office will try to finish all the customers that are before the senators and go on break once they finished handling their own lines customers. When all the customers before the senator left the office that the senator will queue up the line as the sequence of a normal customer. Whenever he is going to queue in line, the manager will wake the respective clerk to back to work as there is always one senator in the passport office. Meanwhile, the office will acquire all the queues lock so no customer will be able to queue up in the office that will be able to simulate customers \'93wait\'94 outside of the passport office. When the senator finished all the things in the passport office, he will leave the office and all the locks being acquired before (the queue lines) will be released and the customer will queue up again and to work as usual in the office.\
\
	\
\
IV. Implementation:\
	\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 class Lock \{\
\pard\pardeftab720
\cf0 	public:\
\'a0 \'a0 		char* getName(): Get the name of the Lock\
\'a0 \'a0		void Acquire(): Acquire the lock, if the lock is being held, add the thread to the wait queue\
\'a0 \'a0 		void Release(): Release the lock, if there is a thread waiting \
\'a0 \'a0 		bool isHeldByCurrentThread():Is the current thread \
\uc0\u8232 \
	private:\
\'a0 \'a0 		List *queue : the data structure to store the waiting thread \'a0 \'a0 \'a0 \'a0 \'a0\
\'a0 \'a0 		Thread *lockHolder : store the current lock holder\
\'a0 \'a0 		enum State\{\
\'a0 \'a0 \'a0 \'a0 			FREE,\
\'a0 \'a0 \'a0 \'a0 			BUSY\
\'a0 \'a0 		\}:the Lock has 2 states: one is free and another is busy\
\'a0 \'a0		 State state : state of lock \};\
\
	Note: The Acquire function in Lock first checks whether the current thread hold the lock and whether the state of the lock is free for a successful acquire.\
		 The Release function in Lock first checks whether the current thread hold the lock and whether the waiting queue is empty.If the queue is not empty, the first thread existing in the waiting queue 		 can acquire the lock next. Otherwise, set the current lock holder to NULL.\
\
	
\fs22 \expnd0\expndtw0\kerning0
class\expnd0\expndtw0\kerning0
 Condition \{\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
	public\expnd0\expndtw0\kerning0
:\expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\'a0 \'a0		\expnd0\expndtw0\kerning0
char\expnd0\expndtw0\kerning0
* getName(): Get the name of the condition\
\'a0\'a0 \'a0\
\'a0 \'a0		\expnd0\expndtw0\kerning0
void\expnd0\expndtw0\kerning0
 Wait(Lock *conditionLock): release the lock, put the current thread to sleep and acquire the lock again.\expnd0\expndtw0\kerning0
\
\expnd0\expndtw0\kerning0
\'a0 \'a0 		\expnd0\expndtw0\kerning0
void\expnd0\expndtw0\kerning0
 Signal(Lock *conditionLock): signal a thread in the waiting queue.\
\'a0 \'a0 		\expnd0\expndtw0\kerning0
void\expnd0\expndtw0\kerning0
 Broadcast(Lock *conditionLock): signal all threads in the waiting queue.\uc0\u8232 \
\expnd0\expndtw0\kerning0
	private\expnd0\expndtw0\kerning0
:\expnd0\expndtw0\kerning0
\
\expnd0\expndtw0\kerning0
\'a0 \'a0 		Lock *waitingLock: \expnd0\expndtw0\kerning0
the lock for the conditional variable\
\expnd0\expndtw0\kerning0
\'a0 \'a0 		List *queue: \expnd0\expndtw0\kerning0
queue for the waiting threads\
\
\pard\pardeftab720

\fs24 \cf0 \expnd0\expndtw0\kerning0
	Note: The Wait function in the Condition first checks whether pass in lock is NULL, whether the waiting Lock is equal to the pass in Lock and whether waiting lock is empty. If waiting lock is empty, then 		 set the waiting lock to the pass in lock.\
		 The Signal function in the Condition first checks whether pass in lock is NULL, whether the waiting Lock is equal to the pass in Lock and whether waiting queue is empty. If waiting queue is empty, 		 print out the message \'93there is nothing to signal\'94.\
		 The Broadcast function in the Condition first checks whether pass in lock is NULL and whether the waiting Lock is equal to the pass in Lock.\
\pard\pardeftab720

\fs22 \cf0 \expnd0\expndtw0\kerning0
\};
\f1 \
\pard\pardeftab720

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\
		\
\
	\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \}\
	\
V. Testing:  (For each test case, you must show)\
	+ How to test\
- How to run the test cases, the commands, the arguments and so on.\
	+ Test Output\
- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output. The grader of your submission will be wanting to compare the output they get with what you say the output is.\
\
VI. Discussion:\
	+ Experiment expectation.  (What is supposed to happen.)\
	+ Experiment result.  (What actually happened.)\
	+ Explanation\
		- Explain your experiment result - how it proves what \
		  you were supposed to prove.\
\
VIII. Miscellaneous:\
- Whatever else you want the grader know about your development.  You can create your own subsections headings here.\
}